# encoding: utf-8
$LOAD_PATH.unshift(File.dirname(__FILE__))
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

if ENV['coverage']
  raise 'simplecov only works on Ruby 1.9' unless RUBY_VERSION =~ /^1\.9/

  require 'simplecov'
  SimpleCov.start { add_filter "spec/" }
end

require 'rspec'
require 'admin_module'

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end

require 'support/stage_factory'
include Factory

##
# Write a data structure to a yml file
#
def write_yaml_data_file filename, data
  File.open(filename, 'w') { |f| f << YAML.dump(data) }
end

##
# Read a data from a yml file
#
def read_yaml_data_file filename
  data = {}
  File.open(filename, 'r') do |f|
    data = YAML.load(f)
  end
  data
end

def data_dir path = nil
  return 'spec/data' unless path
  return File.join('spec/data', path)
end

##
# Command Line Interface object
#
def cli
  return $real_cli unless $real_cli.nil?
  AdminModule.configure do |config|
    config.credentials = { :dev => ['admin', 'Password1*'] }
  end
  $real_cli = AdminModule::CLI.new
end

def quit_cli
  cli.quit
  $real_cli = nil
end


##
# Create a stage given a stage data hash object
#
def create_stage_for_test stage_data
  cli.create_stage(stage_data)
rescue
end

##
# Delete a stage given a stage data hash object
#
def delete_stage_for_test stage_data
  cli.delete_stage stage_data
rescue
end

